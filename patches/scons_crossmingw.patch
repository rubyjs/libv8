diff --git SConstruct SConstruct
index ebce7ff..54a9473 100644
--- SConstruct
+++ SConstruct
@@ -78,7 +78,7 @@ LIBRARY_FLAGS = {
                        'LIVE_OBJECT_LIST', 'OBJECT_PRINT'],
     }
   },
-  'gcc': {
+  'crossmingw': {
     'all': {
       'CCFLAGS':      ['$DIALECTFLAGS', '$WARNINGFLAGS'],
       'CXXFLAGS':     ['-fno-rtti', '-fno-exceptions'],
@@ -299,7 +299,7 @@ LIBRARY_FLAGS = {
 
 
 V8_EXTRA_FLAGS = {
-  'gcc': {
+  'crossmingw': {
     'all': {
       'WARNINGFLAGS': ['-Wall',
                        '-Werror',
@@ -310,8 +310,7 @@ V8_EXTRA_FLAGS = {
     },
     'os:win32': {
       'WARNINGFLAGS': ['-pedantic',
-                       '-Wno-long-long',
-                       '-Wno-pedantic-ms-format'],
+                       '-Wno-long-long'],
       'library:shared': {
         'LIBS': ['winmm', 'ws2_32']
       }
@@ -364,7 +363,7 @@ V8_EXTRA_FLAGS = {
 
 
 MKSNAPSHOT_EXTRA_FLAGS = {
-  'gcc': {
+  'crossmingw': {
     'os:linux': {
       'LIBS': ['pthread'],
     },
@@ -403,7 +402,7 @@ MKSNAPSHOT_EXTRA_FLAGS = {
 
 
 DTOA_EXTRA_FLAGS = {
-  'gcc': {
+  'crossmingw': {
     'all': {
       'WARNINGFLAGS': ['-Werror', '-Wno-uninitialized'],
       'CCFLAGS': GCC_DTOA_EXTRA_CCFLAGS
@@ -424,7 +423,7 @@ CCTEST_EXTRA_FLAGS = {
       'CPPDEFINES': ['USING_V8_SHARED']
     },
   },
-  'gcc': {
+  'crossmingw': {
     'all': {
       'LIBPATH':      [abspath('.')],
       'CCFLAGS':      ['$DIALECTFLAGS', '$WARNINGFLAGS'],
@@ -481,7 +480,7 @@ SAMPLE_FLAGS = {
       'CPPDEFINES': ['USING_V8_SHARED']
     },
   },
-  'gcc': {
+  'crossmingw': {
     'all': {
       'LIBPATH':      ['.'],
       'CCFLAGS':      ['$DIALECTFLAGS', '$WARNINGFLAGS'],
@@ -673,7 +672,7 @@ PREPARSER_FLAGS = {
       'CPPDEFINES': ['USING_V8_SHARED']
     },
   },
-  'gcc': {
+  'crossmingw': {
     'all': {
       'LIBPATH':      ['.'],
       'CCFLAGS':      ['$DIALECTFLAGS', '$WARNINGFLAGS'],
@@ -835,7 +834,7 @@ D8_FLAGS = {
       'LIBPATH': ['.']
     },
   },
-  'gcc': {
+  'crossmingw': {
     'all': {
       'CCFLAGS': ['$DIALECTFLAGS', '$WARNINGFLAGS'],
       'CXXFLAGS': ['-fno-rtti', '-fno-exceptions'],
@@ -958,6 +957,8 @@ def GuessToolchain(env):
   tools = env['TOOLS']
   if 'gcc' in tools:
     return 'gcc'
+  elif 'crossmingw' in tools:
+    return 'crossmingw'
   elif 'msvc' in tools:
     return 'msvc'
   else:
@@ -967,7 +968,7 @@ def GuessToolchain(env):
 def GuessVisibility(env):
   os = env['os']
   toolchain = env['toolchain'];
-  if (os == 'win32' or os == 'cygwin') and toolchain == 'gcc':
+  if (os == 'win32' or os == 'cygwin') and (toolchain == 'gcc' or toolchain == 'crossmingw'):
     # MinGW / Cygwin can't do it.
     return 'default'
   elif os == 'solaris':
@@ -981,6 +982,9 @@ def GuessStrictAliasing(env):
   # See http://code.google.com/p/v8/issues/detail?id=884
   # It can be worked around by disabling strict aliasing.
   toolchain = env['toolchain'];
+  # TODO check version for crossmingw same as gcc
+  if toolchain == 'crossmingw':
+    return 'off'
   if toolchain == 'gcc':
     env = Environment(tools=['gcc'])
     # The gcc version should be available in env['CCVERSION'],
@@ -1004,7 +1008,7 @@ PLATFORM_OPTIONS = {
     'help': 'the os to build for'
   },
   'toolchain': {
-    'values': ['gcc', 'msvc'],
+    'values': ['gcc', 'msvc', 'crossmingw'],
     'guess': GuessToolchain,
     'help': 'the toolchain to use'
   }
@@ -1195,6 +1199,8 @@ def GetTools(opts):
   toolchain = env['toolchain']
   if os == 'win32' and toolchain == 'gcc':
     return ['mingw']
+  elif os == 'win32' and toolchain == 'crossmingw':
+    return ['crossmingw']
   elif os == 'win32' and toolchain == 'msvc':
     return ['msvc', 'mslink', 'mslib', 'msvs']
   else:
diff --git site_scons/site_tools/crossmingw.py site_scons/site_tools/crossmingw.py
new file mode 100644
index 0000000..475448b
--- /dev/null
+++ site_scons/site_tools/crossmingw.py
@@ -0,0 +1,203 @@
+"""SCons.Tool.gcc
+
+Tool-specific initialization for MinGW (http://www.mingw.org/)
+
+There normally shouldn't be any need to import this module directly.
+It will usually be imported through the generic SCons.Tool.Tool()
+selection method.
+
+"""
+
+#
+# __COPYRIGHT__
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "https://bitbucket.org/scons/scons/src/0a64d3bb987e/src/engine/SCons/Tool/mingw.py"
+
+import os
+import os.path
+import string
+
+import SCons.Action
+import SCons.Builder
+import SCons.Defaults
+import SCons.Tool
+import SCons.Util
+
+# This is what we search for to find mingw:
+prefixes = SCons.Util.Split("""
+    mingw32-
+    mingw32msvc-
+    i386-mingw32-
+    i486-mingw32-
+    i586-mingw32-
+    i686-mingw32-
+    i386-mingw32msvc-
+    i486-mingw32msvc-
+    i586-mingw32msvc-
+    i686-mingw32msvc-
+    i686-w64-mingw32-
+""")
+
+def find(env):
+    for prefix in prefixes:
+        # First search in the SCons path and then the OS path:
+        if env.WhereIs(prefix + 'gcc') or SCons.Util.WhereIs(prefix + 'gcc'):
+            return prefix
+
+    return ''
+
+def shlib_generator(target, source, env, for_signature):
+    cmd = SCons.Util.CLVar(['$SHLINK', '$SHLINKFLAGS']) 
+
+    dll = env.FindIxes(target, 'SHLIBPREFIX', 'SHLIBSUFFIX')
+    if dll: cmd.extend(['-o', dll])
+
+    cmd.extend(['$SOURCES', '$_LIBDIRFLAGS', '$_LIBFLAGS'])
+
+    implib = env.FindIxes(target, 'LIBPREFIX', 'LIBSUFFIX')
+    if implib: cmd.append('-Wl,--out-implib,'+implib.get_string(for_signature))
+
+    def_target = env.FindIxes(target, 'WINDOWSDEFPREFIX', 'WINDOWSDEFSUFFIX')
+    insert_def = env.subst("$WINDOWS_INSERT_DEF")
+    if not insert_def in ['', '0', 0] and def_target: \
+        cmd.append('-Wl,--output-def,'+def_target.get_string(for_signature))
+
+    return [cmd]
+
+def shlib_emitter(target, source, env):
+    dll = env.FindIxes(target, 'SHLIBPREFIX', 'SHLIBSUFFIX')
+    no_import_lib = env.get('no_import_lib', 0)
+
+    if not dll:
+        raise SCons.Errors.UserError("A shared library should have exactly one target with the suffix: %s" % env.subst("$SHLIBSUFFIX"))
+    
+    if not no_import_lib and \
+       not env.FindIxes(target, 'LIBPREFIX', 'LIBSUFFIX'):
+
+        # Create list of target libraries as strings
+        targetStrings=env.ReplaceIxes(dll,  
+                                      'SHLIBPREFIX', 'SHLIBSUFFIX',
+                                      'LIBPREFIX', 'LIBSUFFIX')
+        
+        # Now add file nodes to target list
+        target.append(env.fs.File(targetStrings))
+
+    # Append a def file target if there isn't already a def file target
+    # or a def file source. There is no option to disable def file
+    # target emitting, because I can't figure out why someone would ever
+    # want to turn it off.
+    def_source = env.FindIxes(source, 'WINDOWSDEFPREFIX', 'WINDOWSDEFSUFFIX')
+    def_target = env.FindIxes(target, 'WINDOWSDEFPREFIX', 'WINDOWSDEFSUFFIX')
+    if not def_source and not def_target:
+        # Create list of target libraries and def files as strings
+        targetStrings=env.ReplaceIxes(dll,  
+                                      'SHLIBPREFIX', 'SHLIBSUFFIX',
+                                      'WINDOWSDEFPREFIX', 'WINDOWSDEFSUFFIX')
+        
+        # Now add file nodes to target list
+        target.append(env.fs.File(targetStrings))
+
+    return (target, source)
+                         
+
+shlib_action = SCons.Action.Action(shlib_generator, generator=1)
+
+res_action = SCons.Action.Action('$RCCOM', '$RCCOMSTR')
+
+res_builder = SCons.Builder.Builder(action=res_action, suffix='.o',
+                                    source_scanner=SCons.Tool.SourceFileScanner)
+SCons.Tool.SourceFileScanner.add_scanner('.rc', SCons.Defaults.CScan)
+
+def generate(env):
+    mingw_prefix = find(env)
+
+    if mingw_prefix:
+        dir = os.path.dirname(env.WhereIs(mingw_prefix + 'gcc') or SCons.Util.WhereIs(mingw_prefix + 'gcc'))
+
+        # The mingw bin directory must be added to the path:
+        path = env['ENV'].get('PATH', [])
+        if not path: 
+            path = []
+        if SCons.Util.is_String(path):
+            path = string.split(path, os.pathsep)
+
+        env['ENV']['PATH'] = string.join([dir] + path, os.pathsep)
+
+    # Most of mingw is the same as gcc and friends...
+    gnu_tools = ['gcc', 'g++', 'gnulink', 'ar', 'gas', 'm4']
+    for tool in gnu_tools:
+        SCons.Tool.Tool(tool)(env)
+
+    #... but a few things differ:
+    env['CC'] = mingw_prefix + 'gcc'
+    env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS')
+    env['CXX'] = mingw_prefix + 'g++'
+    env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS')
+    env['SHLINKFLAGS'] = SCons.Util.CLVar('$LINKFLAGS -shared')
+    env['SHLINKCOM']   = shlib_action
+    env['LDMODULECOM'] = shlib_action
+    env.Append(SHLIBEMITTER = [shlib_emitter])
+    env['LINK'] = mingw_prefix + 'g++'
+    env['AS'] = mingw_prefix + 'as'
+    env['AR'] = mingw_prefix + 'ar'
+    env['RANLIB'] = mingw_prefix + 'ranlib'
+    env['WIN32DEFPREFIX']        = ''
+    env['WIN32DEFSUFFIX']        = '.def'
+    env['WINDOWSDEFPREFIX']      = '${WIN32DEFPREFIX}'
+    env['WINDOWSDEFSUFFIX']      = '${WIN32DEFSUFFIX}'
+
+    env['SHOBJSUFFIX'] = '.o'
+    env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
+
+    env['RC'] = mingw_prefix + 'windres'
+    env['RCFLAGS'] = SCons.Util.CLVar('')
+    env['RCINCFLAGS'] = '$( ${_concat(RCINCPREFIX, CPPPATH, RCINCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)'
+    env['RCINCPREFIX'] = '--include-dir '
+    env['RCINCSUFFIX'] = ''
+    env['RCCOM'] = '$RC $_CPPDEFFLAGS $RCINCFLAGS ${RCINCPREFIX} ${SOURCE.dir} $RCFLAGS -i $SOURCE -o $TARGET'
+    env['BUILDERS']['RES'] = res_builder
+    
+    # Some setting from the platform also have to be overridden:
+    env['OBJPREFIX']      = ''
+    env['OBJSUFFIX']      = '.o'
+    env['LIBPREFIX']      = 'lib'
+    env['LIBSUFFIX']      = '.a'
+    env['SHOBJPREFIX']    = '$OBJPREFIX'
+    env['SHOBJSUFFIX']    = '$OBJSUFFIX'
+    env['PROGPREFIX']     = ''
+    env['PROGSUFFIX']     = '.exe'
+    env['SHLIBPREFIX']    = ''
+    env['SHLIBSUFFIX']    = '.dll'
+    env['LIBPREFIXES']    = [ '$LIBPREFIX' ]
+    env['LIBSUFFIXES']    = [ '$LIBSUFFIX' ]
+
+def exists(env):
+    return find(env)
+
+# Local Variables:
+# tab-width:4
+# indent-tabs-mode:nil
+# End:
+# vim: set expandtab tabstop=4 shiftwidth=4:
\ No newline at end of file
